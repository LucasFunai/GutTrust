The dataset is a D x F sized matrix, with answers as
a 3 x D matrix.

The dataset is expected to be very small, with high variance
and low correlation.

to fix this, there needs to be a lot of preprocessing done to clean up the dataset.

Although Y is not completely linear, it will be treated as such because the score
always increases when feeling better, and always decreases when feeling worse.

When the dataset is smaller, a simple normal equation is enough.
After the dataset gets bigger (3 months of data?), it will switch to gradient decent.

This is because normal equation needs to load the entire matrix, but gradient decent
can just load the last new data and be fine.

The cost function needs to penalize the algorithm heavily when it guesses on the wrong
multiple of 2 border. What I mean is:

1 2 / 3 4 5 / 6 7

1 and 2 means the person is feeling really ill. guessing 3 when the answer is 4 is fine,
but guessing 2 when the answer is 3 is not.

So the cost function needs to be a mix of a linear one, and a logistic one.

I have two options. either make 2 cost functions or make 1 that mixes both.

mX and mY are the same datasets, but where 1 and 2 = 1, 3 4 5 = 2, and 6 7 = 3.

L is a small number to change how heavily it should be penalized.

a mix would look like: J = 1 / 2m * ((X - y)^2 + ((X - y) * abs(mX - mY) * L))


A normal equation needs X to be invertible, which means it cannot have more variables than
samples. Because of this I need to add lambda * L to the equation to force it to be invertible.
L is an identity matrix with size (n + 1) * (n + 1)

this makes: (X' * X + lambda * L)^-1 * X' * y

